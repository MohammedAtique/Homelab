---
- name: Update and Upgrade Ubuntu Servers
  hosts: all
  serial: 1
  become: yes 

  vars:
    telegram_bot_token: "{{ lookup('env', 'TELEGRAM_BOT_TOKEN') }}"
    telegram_chat_id: "{{ lookup('env', 'TELEGRAM_CHAT_ID') }}"
    updates_file_path: "/tmp/{{ ansible_hostname }}_updates.txt"

  tasks:
    - name: Check if server is pingable before starting
      ansible.builtin.ping:
      register: ping_before

    - name: Stop execution if server is not reachable before starting
      meta: end_play
      when: ping_before is failed

    - name: Gather package facts before update
      package_facts:
        manager: apt

    - name: Store before upgrade package versions
      set_fact:
        before_upgrade: "{{ ansible_facts.packages }}"

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 360
      register: update_cache
      retries: 3
      delay: 5
      until: update_cache is succeeded

    - name: Upgrade all packages to the latest version
      apt:
        upgrade: 'dist'
      register: upgrade_output
      retries: 3
      delay: 5
      until: upgrade_output is succeeded

    - name: Notify failure to update cache
      telegram:
        token: "{{ telegram_bot_token }}"
        api_args:
          chat_id: "{{ telegram_chat_id }}"
          text: "Failed to update APT cache after multiple retries on {{ ansible_hostname }}."
          parse_mode: "markdown"
          disable_web_page_preview: true
          disable_notification: false
      when: update_cache is failed
      delegate_to: localhost
      become: false

    - name: Gather package facts after update
      package_facts:
        manager: apt

    - name: Store after upgrade package versions
      set_fact:
        after_upgrade: "{{ ansible_facts.packages }}"

    - name: Initialize upgraded_packages
      set_fact:
        upgraded_packages: {}

    - name: Find upgraded packages
      set_fact:
        upgraded_packages: "{{ upgraded_packages | combine({item: {'before': before_upgrade[item][0].version, 'after': after_upgrade[item][0].version}}) }}"
      loop: "{{ before_upgrade.keys() | intersect(after_upgrade.keys()) }}"
      when: "before_upgrade[item][0].version != after_upgrade[item][0].version"

    - name: Check if updates are available
      set_fact:
        updates_available: "{{ upgraded_packages | length > 0 }}"

    - name: Write updates to a file
      copy:
        dest: "{{ updates_file_path }}"
        content: |
          Package upgrades completed on {{ ansible_hostname }}:
          {% for pkg, versions in upgraded_packages.items() %}
          {{ pkg }}: {{ versions.before }} -> {{ versions.after }}
          {% endfor %}
      delegate_to: localhost
      become: false
      when: updates_available

    - name: Send notification of no updates available
      ansible.builtin.shell:
        cmd: >
          curl -s -X POST https://api.telegram.org/bot{{ telegram_bot_token }}/sendMessage -d chat_id={{ telegram_chat_id }} -d text="No updates available for {{ ansible_hostname }} currently." -d parse_mode=markdown -d disable_web_page_preview=true
      when: not updates_available
      delegate_to: localhost
      become: false
      ignore_errors: true

    - name: Send notification and upload package updates file
      ansible.builtin.shell:
        cmd: >
          curl -s -X POST https://api.telegram.org/bot{{ telegram_bot_token }}/sendMessage -d chat_id={{ telegram_chat_id }} -d text="Package upgrades completed on {{ ansible_hostname }}. Detailed report will follow." -d parse_mode=markdown -d disable_web_page_preview=true &&
          curl -F "document=@{{ updates_file_path }}" https://api.telegram.org/bot{{ telegram_bot_token }}/sendDocument?chat_id={{ telegram_chat_id }}
      args:
        executable: /bin/bash
      delegate_to: localhost
      become: false
      register: telegram_result
      when: updates_available
      ignore_errors: true

    - name: Check execution result
      fail:
        msg: "Failed to send message or upload document to Telegram. Error: {{ (telegram_result | default({})).stderr }}"
      when: (telegram_result | default({})).rc is defined and (telegram_result | default({})).rc != 0 and updates_available

    - name: Success message if upload succeeds
      debug:
        msg: "Document successfully uploaded to Telegram."
      when: (telegram_result | default({})).rc is defined and (telegram_result | default({})).rc == 0 and updates_available

    - name: Remove the updates file
      ansible.builtin.file:
        path: "{{ updates_file_path }}"
        state: absent
      when: (telegram_result | default({})).rc is defined and (telegram_result | default({})).rc == 0
      delegate_to: localhost
      become: false

    - name: Check if a reboot is needed
      stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Conditionally reboot the server
      when: reboot_required.stat.exists
      block:
        - name: Reboot the machine
          reboot:
            msg: "Reboot initiated by Ansible due to system updates"
            connect_timeout: 5
            reboot_timeout: 600
            pre_reboot_delay: 0
            post_reboot_delay: 30
            test_command: uptime

        - name: Wait for system to come back
          wait_for_connection:
            delay: 30
            timeout: 300

        - name: Check if server is pingable after reboot
          ansible.builtin.ping:
          register: ping_after_reboot

        - name: Stop execution if server is not reachable after reboot
          meta: end_play
          when: ping_after_reboot is failed

    - name: Autoremove unused dependencies
      apt:
        autoremove: yes

    - name: Clean up APT cache
      apt:
        autoclean: yes
